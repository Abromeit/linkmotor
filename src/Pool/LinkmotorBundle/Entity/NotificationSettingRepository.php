<?php

namespace Pool\LinkmotorBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * NotificationSettingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationSettingRepository extends EntityRepository
{
    /**
     * @param User $user
     * @return mixed
     */
    public function getDefaultForUser(User $user)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT n
                 FROM PoolLinkmotorBundle:NotificationSetting n
                 WHERE n.project IS NULL AND n.user = :user"
            )
            ->setParameter('user', $user)
            ->getOneOrNullResult();
    }

    /**
     * @param User $user
     * @param Project $project
     * @return mixed
     */
    public function getForUserAndProject(User $user, Project $project)
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT n
                 FROM PoolLinkmotorBundle:NotificationSetting n
                 WHERE n.project = :project AND n.user = :user"
            )
            ->setParameter('user', $user)
            ->setParameter('project', $project)
            ->getOneOrNullResult();
    }

    /**
     * Returns a valid NotificationSetting object for given user and project. If no project-specific settings
     * are found, this method looks for the default setting for this user. If this isn't present either, a new
     * NotificationSettings object is returned.
     *
     * @param User $user
     * @param Project $project
     * @return NotificationSetting
     */
    public function getSettingForUserAndProject(User $user, Project $project)
    {
        $projectSetting = $this->getForUserAndProject($user, $project);
        if (!$projectSetting) {
            $defaultSetting = $this->getDefaultForUser($user);
            if (!$defaultSetting) {
                $defaultSetting = new NotificationSetting();
                $defaultSetting->setUser($user);
            }
            $projectSetting = $defaultSetting;
        }

        return $projectSetting;
    }

    /**
     * @param Alert $alert
     * @param integer $when
     * @return array
     */
    public function getUsersToNotify(Alert $alert, $when)
    {
        $projectSettings = $this->getEntityManager()
            ->createQuery(
                "SELECT n
                 FROM PoolLinkmotorBundle:NotificationSetting n
                 WHERE n.project = :project"
            )
            ->setParameter('project', $alert->getProject())
            ->getResult();

        // Jetzt noch all die User holen, die noch gar keine NotificationSettings haben
        $userIdsWithDefaultSettings = array();
        $defaultSettings = $this->getEntityManager()
            ->createQuery(
                "SELECT n
                 FROM PoolLinkmotorBundle:NotificationSetting n
                 WHERE n.project IS NULL"
            )
            ->getResult();
        foreach ($defaultSettings as $settings) {
            $userIdsWithDefaultSettings[] = $settings->getUser()->getId();
        }

        if ($userIdsWithDefaultSettings) {
            $usersWithoutDefaultSettings = $this->getEntityManager()
                ->createQuery(
                    "SELECT u
                     FROM PoolLinkmotorBundle:User u
                     WHERE u.inactive=0 AND NOT u.id IN (:userIds)"
                )
                ->setParameter('userIds', $userIdsWithDefaultSettings)
                ->getResult();
        } else {
            $usersWithoutDefaultSettings = $this->getEntityManager()
                ->createQuery(
                    "SELECT u
                     FROM PoolLinkmotorBundle:User u
                     WHERE u.inactive=0"
                )
                ->getResult();}

        // DefaultSettings für diese User anlegen
        foreach ($usersWithoutDefaultSettings as $user) {
            $settings = new NotificationSetting();
            $settings->setUser($user);
            $defaultSettings[] = $settings;
        }

        // Jetzt prüfen, ob dieser Alert überhaupt passt
        $resultingUsers = array();
        $excludeUserIds = array();
        foreach ($projectSettings as $settings) {
            if ($settings->getUser()->isInactive()) {
                continue;
            }
            $user = $settings->getUser();
            $userId = $user->getId();
            if ($settings->matchesAlert($alert, $when)) {
                $resultingUsers[$userId] = $user;
            } else {
                $excludeUserIds[] = $userId;
            }
        }

        foreach ($defaultSettings as $settings) {
            $user = $settings->getUser();
            if ($user->isInactive()) {
                continue;
            }
            $userId = $user->getId();
            if (in_array($userId, $excludeUserIds)) {
                // Es gab ein Project-Setting, aber die hat nicht gegriffen. Dann greift aber auch die
                // Default-Setting nicht mehr
                continue;
            }
            if ($settings->matchesAlert($alert, $when) && !isset($resultingUsers[$userId])) {
                $resultingUsers[$user->getId()] = $user;
            }
        }

        return $resultingUsers;
    }
}
